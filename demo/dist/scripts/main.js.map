{"version":3,"sources":["../bower_components/what-input/dist/what-input.js","../assets/scripts/main.js"],"names":["root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","currentInput","currentIntent","doc","document","documentElement","formInputs","functionList","ignoreMap","inputMap","keydown","mousedown","mousemove","MSPointerDown","MSPointerMove","pointerdown","pointermove","touchstart","inputTypes","isBuffering","isScrolling","mousePos","x","y","pointerMap","2","3","4","supportsPassive","opts","Object","defineProperty","get","window","addEventListener","e","addListeners","PointerEvent","updateInput","setIntent","MSPointerEvent","touchBuffer","detectWheel","passive","event","eventKey","which","value","type","pointerType","activeElem","activeElement","activeInput","nodeName","indexOf","toLowerCase","setInput","setAttribute","push","className","fireFunctions","screenX","screenY","i","len","length","function","undefined","createElement","onmousewheel","Array","prototype","ask","opt","types","ignoreKeys","arr","onChange","funct","eventType","$","Sage","common","init","objectFitImages","finalize","UTIL","fire","func","funcname","args","namespace","loadEvents","each","body","replace","split","classnm","ready","jQuery"],"mappings":"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","file":"main.js","sourcesContent":["/**\n * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).\n * @version v4.1.6\n * @link https://github.com/ten1seven/what-input\n * @license MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"whatInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"whatInput\"] = factory();\n\telse\n\t\troot[\"whatInput\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function () {\n\t  /*\n\t   * variables\n\t   */\n\n\t  // last used input type\n\t  var currentInput = 'initial';\n\n\t  // last used input intent\n\t  var currentIntent = null;\n\n\t  // cache document.documentElement\n\t  var doc = document.documentElement;\n\n\t  // form input types\n\t  var formInputs = ['input', 'select', 'textarea'];\n\n\t  var functionList = [];\n\n\t  // list of modifier keys commonly used with the mouse and\n\t  // can be safely ignored to prevent false keyboard detection\n\t  var ignoreMap = [16, // shift\n\t  17, // control\n\t  18, // alt\n\t  91, // Windows key / left Apple cmd\n\t  93 // Windows menu / right Apple cmd\n\t  ];\n\n\t  // mapping of events to input types\n\t  var inputMap = {\n\t    keydown: 'keyboard',\n\t    mousedown: 'mouse',\n\t    mousemove: 'mouse',\n\t    MSPointerDown: 'pointer',\n\t    MSPointerMove: 'pointer',\n\t    pointerdown: 'pointer',\n\t    pointermove: 'pointer',\n\t    touchstart: 'touch'\n\t  };\n\n\t  // array of all used input types\n\t  var inputTypes = [];\n\n\t  // boolean: true if touch buffer is active\n\t  var isBuffering = false;\n\n\t  // boolean: true if the page is being scrolled\n\t  var isScrolling = false;\n\n\t  // store current mouse position\n\t  var mousePos = {\n\t    x: null,\n\t    y: null\n\t  };\n\n\t  // map of IE 10 pointer events\n\t  var pointerMap = {\n\t    2: 'touch',\n\t    3: 'touch', // treat pen like touch\n\t    4: 'mouse'\n\t  };\n\n\t  var supportsPassive = false;\n\n\t  try {\n\t    var opts = Object.defineProperty({}, 'passive', {\n\t      get: function get() {\n\t        supportsPassive = true;\n\t      }\n\t    });\n\n\t    window.addEventListener('test', null, opts);\n\t  } catch (e) {}\n\n\t  /*\n\t   * set up\n\t   */\n\n\t  var setUp = function setUp() {\n\t    // add correct mouse wheel event mapping to `inputMap`\n\t    inputMap[detectWheel()] = 'mouse';\n\n\t    addListeners();\n\t    setInput();\n\t  };\n\n\t  /*\n\t   * events\n\t   */\n\n\t  var addListeners = function addListeners() {\n\t    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\n\t    // can only demonstrate potential, but not actual, interaction\n\t    // and are treated separately\n\n\t    // pointer events (mouse, pen, touch)\n\t    if (window.PointerEvent) {\n\t      doc.addEventListener('pointerdown', updateInput);\n\t      doc.addEventListener('pointermove', setIntent);\n\t    } else if (window.MSPointerEvent) {\n\t      doc.addEventListener('MSPointerDown', updateInput);\n\t      doc.addEventListener('MSPointerMove', setIntent);\n\t    } else {\n\t      // mouse events\n\t      doc.addEventListener('mousedown', updateInput);\n\t      doc.addEventListener('mousemove', setIntent);\n\n\t      // touch events\n\t      if ('ontouchstart' in window) {\n\t        doc.addEventListener('touchstart', touchBuffer);\n\t        doc.addEventListener('touchend', touchBuffer);\n\t      }\n\t    }\n\n\t    // mouse wheel\n\t    doc.addEventListener(detectWheel(), setIntent, supportsPassive ? { passive: true } : false);\n\n\t    // keyboard events\n\t    doc.addEventListener('keydown', updateInput);\n\t  };\n\n\t  // checks conditions before updating new input\n\t  var updateInput = function updateInput(event) {\n\t    // only execute if the touch buffer timer isn't running\n\t    if (!isBuffering) {\n\t      var eventKey = event.which;\n\t      var value = inputMap[event.type];\n\t      if (value === 'pointer') value = pointerType(event);\n\n\t      if (currentInput !== value || currentIntent !== value) {\n\t        var activeElem = document.activeElement;\n\t        var activeInput = false;\n\n\t        if (activeElem && activeElem.nodeName && formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1) {\n\t          activeInput = true;\n\t        }\n\n\t        if (value === 'touch' ||\n\t        // ignore mouse modifier keys\n\t        value === 'mouse' ||\n\t        // don't switch if the current element is a form input\n\t        value === 'keyboard' && eventKey && activeInput && ignoreMap.indexOf(eventKey) === -1) {\n\t          // set the current and catch-all variable\n\t          currentInput = currentIntent = value;\n\n\t          setInput();\n\t        }\n\t      }\n\t    }\n\t  };\n\n\t  // updates the doc and `inputTypes` array with new input\n\t  var setInput = function setInput() {\n\t    doc.setAttribute('data-whatinput', currentInput);\n\t    doc.setAttribute('data-whatintent', currentInput);\n\n\t    if (inputTypes.indexOf(currentInput) === -1) {\n\t      inputTypes.push(currentInput);\n\t      doc.className += ' whatinput-types-' + currentInput;\n\t    }\n\n\t    fireFunctions('input');\n\t  };\n\n\t  // updates input intent for `mousemove` and `pointermove`\n\t  var setIntent = function setIntent(event) {\n\t    // test to see if `mousemove` happened relative to the screen\n\t    // to detect scrolling versus mousemove\n\t    if (mousePos['x'] !== event.screenX || mousePos['y'] !== event.screenY) {\n\t      isScrolling = false;\n\n\t      mousePos['x'] = event.screenX;\n\t      mousePos['y'] = event.screenY;\n\t    } else {\n\t      isScrolling = true;\n\t    }\n\n\t    // only execute if the touch buffer timer isn't running\n\t    // or scrolling isn't happening\n\t    if (!isBuffering && !isScrolling) {\n\t      var value = inputMap[event.type];\n\t      if (value === 'pointer') value = pointerType(event);\n\n\t      if (currentIntent !== value) {\n\t        currentIntent = value;\n\n\t        doc.setAttribute('data-whatintent', currentIntent);\n\n\t        fireFunctions('intent');\n\t      }\n\t    }\n\t  };\n\n\t  // buffers touch events because they frequently also fire mouse events\n\t  var touchBuffer = function touchBuffer(event) {\n\t    if (event.type === 'touchstart') {\n\t      isBuffering = false;\n\n\t      // set the current input\n\t      updateInput(event);\n\t    } else {\n\t      isBuffering = true;\n\t    }\n\t  };\n\n\t  var fireFunctions = function fireFunctions(type) {\n\t    for (var i = 0, len = functionList.length; i < len; i++) {\n\t      if (functionList[i].type === type) {\n\t        functionList[i].function.call(undefined, currentIntent);\n\t      }\n\t    }\n\t  };\n\n\t  /*\n\t   * utilities\n\t   */\n\n\t  var pointerType = function pointerType(event) {\n\t    if (typeof event.pointerType === 'number') {\n\t      return pointerMap[event.pointerType];\n\t    } else {\n\t      // treat pen like touch\n\t      return event.pointerType === 'pen' ? 'touch' : event.pointerType;\n\t    }\n\t  };\n\n\t  // detect version of mouse wheel event to use\n\t  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n\t  var detectWheel = function detectWheel() {\n\t    var wheelType = void 0;\n\n\t    // Modern browsers support \"wheel\"\n\t    if ('onwheel' in document.createElement('div')) {\n\t      wheelType = 'wheel';\n\t    } else {\n\t      // Webkit and IE support at least \"mousewheel\"\n\t      // or assume that remaining browsers are older Firefox\n\t      wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n\t    }\n\n\t    return wheelType;\n\t  };\n\n\t  /*\n\t   * init\n\t   */\n\n\t  // don't start script unless browser cuts the mustard\n\t  // (also passes if polyfills are used)\n\t  if ('addEventListener' in window && Array.prototype.indexOf) {\n\t    setUp();\n\t  }\n\n\t  /*\n\t   * api\n\t   */\n\n\t  return {\n\t    // returns string: the current input type\n\t    // opt: 'loose'|'strict'\n\t    // 'strict' (default): returns the same value as the `data-whatinput` attribute\n\t    // 'loose': includes `data-whatintent` value if it's more current than `data-whatinput`\n\t    ask: function ask(opt) {\n\t      return opt === 'loose' ? currentIntent : currentInput;\n\t    },\n\n\t    // returns array: all the detected input types\n\t    types: function types() {\n\t      return inputTypes;\n\t    },\n\n\t    // overwrites ignored keys with provided array\n\t    ignoreKeys: function ignoreKeys(arr) {\n\t      ignoreMap = arr;\n\t    },\n\n\t    // attach functions to input and intent \"events\"\n\t    // funct: function to fire on change\n\t    // eventType: 'input'|'intent'\n\t    onChange: function onChange(funct, eventType) {\n\t      functionList.push({\n\t        function: funct,\n\t        type: eventType\n\t      });\n\t    }\n\t  };\n\t}();\n\n/***/ })\n/******/ ])\n});\n;","/* ========================================================================\n * DOM-based Routing\n * Based on http://goo.gl/EUTi53 by Paul Irish\n *\n * Only fires on body classes that match. If a body class contains a dash,\n * replace the dash with an underscore when adding it to the object below.\n *\n * .noConflict()\n * The routing is enclosed within an anonymous function so that you can\n * always reference jQuery with $, even when in .noConflict() mode.\n * ======================================================================== */\n\n\n(function($) {\n\n  // Use this variable to set up the common and page specific functions. If you\n  // rename this variable, you will also need to rename the namespace below.\n  var Sage = {\n    // All pages\n    'common': {\n      init: function () {\n        // JavaScript to be fired on all pages\n\n        //Fit image if not supported browser\n        objectFitImages();\n\n      },\n      finalize: function () {\n        // JavaScript to be fired on all pages, after page specific JS is fired\n\n      }\n    }\n  };\n\n  // The routing fires all common scripts, followed by the page specific scripts.\n  // Add additional events for more control over timing e.g. a finalize event\n  var UTIL = {\n    fire: function(func, funcname, args) {\n      var fire;\n      var namespace = Sage;\n      funcname = (funcname === undefined) ? 'init' : funcname;\n      fire = func !== '';\n      fire = fire && namespace[func];\n      fire = fire && typeof namespace[func][funcname] === 'function';\n\n      if (fire) {\n        namespace[func][funcname](args);\n      }\n    },\n    loadEvents: function() {\n      // Fire common init JS\n      UTIL.fire('common');\n\n      // Fire page-specific init JS, and then finalize JS\n      $.each(document.body.className.replace(/-/g, '_').split(/\\s+/), function(i, classnm) {\n        UTIL.fire(classnm);\n        UTIL.fire(classnm, 'finalize');\n      });\n\n      // Fire common finalize JS\n      UTIL.fire('common', 'finalize');\n    }\n  };\n\n  // Load Events\n  $(document).ready(UTIL.loadEvents);\n\n})(jQuery); // Fully reference jQuery after this point.\n\n"],"sourceRoot":"assets/scripts/"}